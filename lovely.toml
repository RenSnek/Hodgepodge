[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "local cards_destroyed = {}"
position = "after"
payload = '''
local has_blackhole_card = false
local first_blackhole = 0

for i = 1, #scoring_hand do
    if SMODS.has_enhancement(scoring_hand[i],'m_hodge_blackhole') and not scoring_hand[i].debuff then
        if not has_blackhole_card then
            first_blackhole = i
        end
        has_blackhole_card = true
    end
end

for i=1, #scoring_hand do
    if has_blackhole_card and i ~= first_blackhole and not ((#SMODS.find_card("j_hodge_spaghettification") > 0) and SMODS.pseudorandom_probability(card, 'spaghettification', 1, 4, 'spaghettification')) then
        cards_destroyed[#cards_destroyed+1] = scoring_hand[i]
        scoring_hand[i].destroyed = true
    end
end
'''
match_indent = true
overwrite = false


[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "not (card.ability.set == 'Joker' and #G.jokers.cards < G.jokers.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) and"
position = "at"
payload = '''
not (card.ability.set == 'Joker' and #G.jokers.cards < G.jokers.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0) - ((card.edition and card.edition.hodge_big) and 1 or 0)) and
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0)) then"
position = "at"
payload = '''
not (card.ability.consumeable and #G.consumeables.cards < G.consumeables.config.card_limit + ((card.edition and card.edition.negative) and 1 or 0) - ((card.edition and card.edition.hodge_big) and 1 or 0)) then
'''
match_indent = true

# [[patches]]
# [patches.pattern]
# target = "functions/button_callbacks.lua"
# pattern = "e.config.object.scale = scale_number(G.GAME.current_round.current_hand.mult, 0.9, 1000)"
# position = "at"
# payload = '''
# e.config.object.scale = 3 --math.max(10,scale_number(G.GAME.current_round.current_hand.mult, 0.9, 1000))
# '''
# match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "generate_card_ui(v, full_UI_table)"
position = "at"
payload = '''
if v.key == "hodge_honesty" then
    generate_card_ui(v, full_UI_table, nil, nil, nil, nil, nil, nil, card)
else
    generate_card_ui(v, full_UI_table)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/card_draw.lua"]'
pattern =  '''
if self.ability.name == 'Hologram' then
    self.hover_tilt = self.hover_tilt*1.5
    self.children.floating_sprite:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 2*scale_mod, 2*rotate_mod)
    self.hover_tilt = self.hover_tilt/1.5
'''
position = "after"
payload = '''
elseif self.ability.name == "j_hodge_vestup" then
    self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,nil, nil,-0.8,-1.1 + 0.1,nil, 0.6)
    self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, nil, nil,-0.8,-1.1)
elseif self.ability.name == "j_hodge_missingno" then
    local x_mod = math.cos(1.8*G.TIMERS.REAL)*0.3
    local y_mod = math.sin(3.6*G.TIMERS.REAL)*0.3
    rotate_mod = (x_mod * 0.5) + ((math.random()-0.5) * 0.1)
    self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod, x_mod, y_mod+(0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL)),nil, 0.6)
    self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod,x_mod,y_mod)
elseif self.ability.name == "j_hodge_badegg" then
    local ramp = math.pow((math.cos(math.mod(G.TIMERS.REAL,math.pi))+1)/2,2)
    rotate_mod = (math.sin(G.TIMERS.REAL*12)*math.sin(G.TIMERS.REAL)*ramp) * 0.4
    self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod, 0, 0.22 + (0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL)),nil, 0.6)
    self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod,0,0.22)
elseif self.ability.name == "j_hodge_eeeee" then
    rotate_mod = (rotate_mod * 2) - 0.4
    self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,-0.1, 0.05 + 0.03*math.sin(1.8*G.TIMERS.REAL),nil, 0.6)
    self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod,-0.1,-0.05)
elseif self.ability.name == "j_hodge_jovialmerriment" then
    local x_period = 2.17
    local y_period = 1.39
    local x_mult = 0.5
    local y_mult = 0.75
    local x_mod = ((4 * math.abs((G.TIMERS.REAL / x_period) - math.floor((G.TIMERS.REAL / x_period) + 0.5))) - 1) * x_mult
    local y_mod = ((4 * math.abs((G.TIMERS.REAL / y_period) - math.floor((G.TIMERS.REAL / y_period) + 0.5))) - 1) * y_mult
    local rotate_mod = 0
    --self.children.floating_sprite:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod, x_mod, y_mod+(0.1 + 0.03*math.sin(1.8*G.TIMERS.REAL)),nil, 0.6)
    self.children.floating_sprite:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod, x_mod, y_mod)
'''
match_indent = true
overwrite = false


[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Hanging Chad' and (
context.other_card == context.scoring_hand[1]) then
    return {
        message = localize('k_again_ex'),
        repetitions = self.ability.extra,
        card = self
    }
end
'''
position = "at"
payload = '''
if self.ability.name == 'Hanging Chad' and (
HODGE.table_contains(HODGE.first_card_merge_down(context.scoring_hand),context.other_card)) then
    return {
        message = localize('k_again_ex'),
        repetitions = self.ability.extra,
        card = self
    }
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Photograph' then
    local first_face = nil
    for i = 1, #context.scoring_hand do
        if context.scoring_hand[i]:is_face() then first_face = context.scoring_hand[i]; break end
    end
    if context.other_card == first_face then
        return {
            x_mult = self.ability.extra,
            colour = G.C.RED,
            card = self
        }
    end
end
'''
position = "at"
payload = '''
if self.ability.name == 'Photograph' then

    local merge = false
    for _,j in ipairs(G.jokers.cards) do
        if j.ability and j.ability.name == "j_hodge_mergedown" then
            merge = true
        end 
    end

    local first_face = {}
    for i = 1, #context.scoring_hand do
        if context.scoring_hand[i]:is_face() then
            table.insert(first_face,context.scoring_hand[i]);
            if not merge then
                break
            end
        end
    end
    if HODGE.table_contains(first_face,context.other_card) then
        return {
            x_mult = self.ability.extra,
            colour = G.C.RED,
            card = self
        }
    end
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)"
position = "at"
payload = "self.sell_cost = (self.ability.name == 'j_hodge_badegg' and -256) or (math.floor(self.cost/2) + (self.ability.extra_value or 0))"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "at"
payload = "self.cost = math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.d_size > 0 then
'''
position = "at"
payload = '''
if self.ability.d_size ~= 0 then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
SMODS.calculate_context({end_of_round = true, game_over = game_over, beat_boss = G.GAME.blind.boss })
'''
position = "after"
payload = '''
G.GAME.hodge_last_blind_type = G.GAME.blind:get_type()
'''
match_indent = true
overwrite = false

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''
# if self.ability.name == 'Chicot' and G.GAME.blind and G.GAME.blind.boss and not G.GAME.blind.disabled then
# '''
# position = "at"
# payload = '''
# if self.ability.name == 'Chicot' and G.GAME.blind and G.GAME.blind.boss and not G.GAME.blind.disabled then
#     -- print(G.hodge_chicot_override)
# '''
# match_indent = true

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = '''
if not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then
'''
position = "at"
payload = '''
if (#SMODS.find_card("j_hodge_exploded") > 0) and text == SMODS.find_card("j_hodge_exploded")[1].ability.extra.poker_hand then
    mult = mod_mult(0)
    hand_chips = mod_chips(0)
    play_area_status_text("Charging!")--localize('k_not_allowed_ex'), true)
elseif not G.GAME.blind:debuff_hand(G.play.cards, poker_hands, text) then
'''
match_indent = true

### Support for main_start in edition tooltips ###
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''t.set = res.set or t.set'''
position = "after"
payload = '''t.main_start = res.main_start or t.main_start'''
match_indent = true
times = 1

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = '''if main_start then 
    desc_nodes[#desc_nodes+1] = main_start 
end'''
position = "at"
payload = '''if _c.main_start or main_start then 
    desc_nodes[#desc_nodes+1] = _c.main_start or main_start 
end'''
match_indent = true
### End support ###

### what if balatro was Blue ###
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
love.graphics.setCanvas(G.AA_CANVAS)
'''
position = "at"
payload = '''
if G.GAME.hodge_blue then
    love.graphics.setCanvas(HODGE.BLUE_CANVAS)
    love.graphics.setShader( G.SHADERS['hodge_blue'])
    love.graphics.draw(self.CANVAS, 0, 0)
end

love.graphics.setCanvas(G.AA_CANVAS)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
    love.graphics.draw(self.CANVAS, 0, 0)
love.graphics.pop()
'''
position = "at"
payload = '''
    if G.GAME.hodge_blue then
        love.graphics.draw(HODGE.BLUE_CANVAS, 0, 0)
    else
        love.graphics.draw(self.CANVAS, 0, 0)
    end
love.graphics.pop()
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''
G.CANVAS:setFilter('linear', 'linear')
'''
position = "after"
payload = '''
HODGE.BLUE_CANVAS = love.graphics.newCanvas(w*G.CANV_SCALE, h*G.CANV_SCALE, {type = '2d', readable = true})
HODGE.prophecy_canvas = love.graphics.newCanvas(w*G.CANV_SCALE, h*G.CANV_SCALE, {type = '2d', readable = true})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''
self.GAME.current_round.reroll_cost = self.GAME.base_reroll_cost
'''
position = "after"
payload = '''

self.GAME.hodge_blue = false
'''
match_indent = true
### its blue now, thats my attack ##



# [[patches]]
# [patches.pattern]
# target = "game.lua"
# pattern = '''
# if not nosave_shop then SMODS.calculate_context({starting_shop = true}) end
# '''
# position = "after"
# payload = '''
# if (not nosave_shop) and (G.GAME.hodge_last_blind_type == 'Boss') and (not G.GAME.hodge_loop_incoming) then
#     G.GAME.hodge_loop_save = STR_PACK(G.culled_table)
#     print("saved")
# end
# '''
# match_indent = true
# overwrite = false